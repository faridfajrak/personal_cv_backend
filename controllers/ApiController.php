<?php

namespace app\controllers;


use app\models\FileUpload;
use app\models\Platforms;
use app\models\Profile;
use app\models\Projects;
use app\models\ProjectsPlatform;
use app\models\ProjectsTechnology;
use app\models\Skills;
use app\models\Technologies;
use app\models\User;
use app\traits\ControllerTrait;
use phpDocumentor\Reflection\Types\Array_;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;
use yii\web\Controller;

class ApiController extends Controller
{
    

 
    public function beforeAction($action)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
    
    public static function allowedDomains() {
    return [
        '*',                        // star allows all domains
        'https://f.fajrak.barbatstudio.com',
        // 'http://test2.example.com',
    ];
}

/**
 * @inheritdoc
 */
public function behaviors() {
    return array_merge(parent::behaviors(), [

        // For cross-domain AJAX request
        'corsFilter'  => [
            'class' => \yii\filters\Cors::className(),
            'cors'  => [
                // restrict access to domains:
                'Origin'                           => static::allowedDomains(),
                'Access-Control-Request-Method'    => ['GET'],
                'Access-Control-Allow-Credentials' => true,
                'Access-Control-Request-Headers' => ['*'],
                'Access-Control-Max-Age'           => 3600,                 // Cache (seconds)
            ],
        ],

    ]);
}
    

    private function checkKey($key){
        $user = User::findByAuthKey($key);

        if( $user!= null &&  $user->status == 10){
            return true;
        }
        return false;
    }
    private function sendResponse($data,$status){
        \Yii::$app->response->statusCode = $status;
        $message = "success";
        switch ($status)
        {
            case 404 :
                $message="No Data Available";
                break;
            case 401:
                $message="You dont have access to this Api";
                break;
        }
        return ControllerTrait::getStandardApi($data,$message);
    }

    private function getStatusCode($data){
        switch ($data)
        {
            case null:
                return 404;
            default:
                return 200;
        }

    }
    public function actionGetPlatforms(){
        $header = \Yii::$app->request->headers;
        if($this->checkKey($header['key']))
        {
            $data = Platforms::getList(['active'=>1]);
            $data = ['platforms' =>$data];
            return $this->sendResponse($data,$this->getStatusCode($data));
        }else{
            return $this->sendResponse([],401);
        }
    }

    public function actionGetSkills(){
        $header = \Yii::$app->request->headers;
        if($this->checkKey($header['key']))
        {
            $data = Skills::getList(['active'=>1]);
            $data = ['skills' =>$data];
            return $this->sendResponse($data,$this->getStatusCode($data));
        }else{
            return $this->sendResponse([],401);
        }
    }

    public function actionGetMainPage(){

        $header = \Yii::$app->request->headers;
        
        if($this->checkKey($header['key']))
        {
            $skills = Skills::getList(['active'=>1]);
            $profile = Profile::findOne(['id'=>1]);
            $profile = ArrayHelper::toArray($profile);
            $pic = FileUpload::findOne(['refer_table'=>'profile','refer_id'=>$profile['id'],'refer_column'=>'profilePicture']);
            $linkedInIcon = FileUpload::findOne(['refer_table'=>'profile','refer_id'=>$profile['id'],'refer_column'=>'linkedInIcon']);
            $skypeIcon = FileUpload::findOne(['refer_table'=>'profile','refer_id'=>$profile['id'],'refer_column'=>'skypeIcon']);
            $gitHubIcon = FileUpload::findOne(['refer_table'=>'profile','refer_id'=>$profile['id'],'refer_column'=>'gitHubIcon']);
            $emailIcon = FileUpload::findOne(['refer_table'=>'profile','refer_id'=>$profile['id'],'refer_column'=>'emailIcon']);

            if($pic!= null)
            {
                $profile['image'] = Url::base(true).'/'.$pic->relative_path;
            }else{
                $profile['image'] ="";
            }

            if($linkedInIcon!= null)
            {
                $profile['linkedInIcon'] = Url::base(true).'/'.$linkedInIcon->relative_path;
            }else{
                $profile['linkedInIcon'] ="";
            }

            if($skypeIcon!= null)
            {
                $profile['skypeIcon'] = Url::base(true).'/'.$skypeIcon->relative_path;
            }else{
                $profile['skypeIcon'] ="";
            }

            if($gitHubIcon!= null)
            {
                $profile['gitHubIcon'] = Url::base(true).'/'.$gitHubIcon->relative_path;
            }else{
                $profile['gitHubIcon'] ="";
            }

            if($emailIcon!= null)
            {
                $profile['emailIcon'] = Url::base(true).'/'.$emailIcon->relative_path;
            }else{
                $profile['emailIcon'] ="";
            }

            $profile['skills'] = $skills;
        

            $data = ['profile' =>$profile];
            return $this->sendResponse($data,$this->getStatusCode($data));
        }else{
            return $this->sendResponse([],401);
        }
    }

    public function actionGetProjects(){
        $header = \Yii::$app->request->headers;
        if($this->checkKey($header['key']))
        {
            $projects = Projects::getList(['active'=>1]);

            $data =[];
            foreach ($projects as $key=>$project)
            {
                $tmpPlat =[];
                $tmpTech =[];
                $screen_1 = FileUpload::findOne(['refer_table'=>'projects','refer_id'=>$project->id,'refer_column'=>'screen_1']);
                $screen_2 = FileUpload::findOne(['refer_table'=>'projects','refer_id'=>$project->id,'refer_column'=>'screen_2']);
                $screen_3 = FileUpload::findOne(['refer_table'=>'projects','refer_id'=>$project->id,'refer_column'=>'screen_3']);
                $video = FileUpload::findOne(['refer_table'=>'projects','refer_id'=>$project->id,'refer_column'=>'video']);

                foreach ($project["projectsPlatforms"] as $projectsPlatform){
                    $platform = Platforms::findOne(['id'=>$projectsPlatform->platform_id]);
                     array_push($tmpPlat,ArrayHelper::toArray( $platform));

                }

                foreach ($project["projectsTechnologies"] as $projectsTech){
                    $tech = Technologies::findOne(['id'=>$projectsTech->technology_id]);
                    array_push($tmpTech,ArrayHelper::toArray($tech));
                }
                $projectArray = ArrayHelper::toArray($project);

                if($screen_1!=null)
                    $projectArray['pic_1'] = Url::base(true).'/'. $screen_1->relative_path;
                else
                    $projectArray['pic_1'] = "";

                if($screen_2!=null)
                    $projectArray['pic_2'] = Url::base(true).'/'. $screen_2->relative_path;
                else
                    $projectArray['pic_2'] = "";

                if($screen_3!=null)
                    $projectArray['pic_3'] = Url::base(true).'/'. $screen_3->relative_path;
                else
                    $projectArray['pic_3'] = "";

                if($video!=null)
                    $projectArray['video'] = Url::base(true).'/'. $video->relative_path;
                else
                    $projectArray['video'] = "";
                $projectArray['platforms'] = $tmpPlat;
                $projectArray['technology'] = $tmpTech;


                array_push($data,$projectArray);
            }


            $data = ['projects' =>$data];
            return $this->sendResponse($data,$this->getStatusCode($data));
        }else{
            return $this->sendResponse([],401);
        }
    }








}